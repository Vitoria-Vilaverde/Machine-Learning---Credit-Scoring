import pandas as pd
url = 'https://raw.githubusercontent.com/alura-cursos/credit_scoring/main/base_dados_traduzida.csv'
data = pd.read_csv(url)
data.head()
x = data.drop(columns = 'default')
x.head()

conta_corrente_dictionary = {
    '< 0 DM': 1,
    '0 <= ... < 200 DM': 2,
    'no checking account': 3,
    '>= 200 DM / salary assignments for at least 1 year': 4
}

data['conta_corrente'] = data['conta_corrente'].map(conta_corrente_dictionary)
data.head()

#mudando categoria variavel 'historico_credito'

historico_credito_dictionary = { 'no credits taken/ all credits paid back duly' : 1,
      'all credits at this bank paid back duly' : 2,
      'existing credits paid back duly till now' : 3,
      'delay in paying off in the past' : 4,
      'critical account/ other credits existing (not at this bank)' : 5     
}
data['historico_credito'] = data['historico_credito'].map(historico_credito_dictionary)
data.head()

#mudando categoria variavel 'proposito_emprestimo'

proposito_emprestimo_dictionary = { 'car (new)' : 1,
      'car (used)' : 2,
      'furniture/equipment' : 3,
      'radio/television' : 4,
      'domestic appliances' : 5,
      'repairs' : 6,
      'education' : 7,
      '(vacation - does not exist?)' : 8,
      'retraining' : 9,
      'business' : 10,
      'others' : 11
}
data['proposito_emprestimo'] = data['proposito_emprestimo'].map(proposito_emprestimo_dictionary)
data.head()

#mudando categoria variavel 'reserva_cc'

reserva_cc_dictionary = { 'unknown/ no savings account' : 1,
      '.. >= 1000 DM ' : 2,
      '500 <= ... < 1000 DM ' : 3,
      '100 <= ... < 500 DM' : 4,
      '... < 100 DM' : 5     
}
data['reserva_cc'] = data['reserva_cc'].map(reserva_cc_dictionary)
data.head()

#mudando categoria variavel 'tempo_emprego_atual'

tempo_emprego_atual_dictionary = { '.. >= 7 years' : 1,
      '4 <= ... < 7 years' : 2,
      '1 <= ... < 4 years' : 3,
      '... < 1 year ' : 4,
      'unemployed' : 5     
}
data['tempo_emprego_atual'] = data['tempo_emprego_atual'].map(tempo_emprego_atual_dictionary)
data.head()

#mudando categoria variavel 'sexo_est_civil'

sexo_est_civil_dictionary = { 'male : divorced/separated' : 1,
      'female : divorced/separated/married' : 2,
      'male : single' : 3,
      'male : married/widowed' : 4,
      'female : single' : 5     
}
data['sexo_est_civil'] = data['sexo_est_civil'].map(sexo_est_civil_dictionary)
data.head()

#mudando categoria variavel 'outros_fiadores'

outros_fiadores_dictionary = { 'none' : 1,
      'co-applicant' : 2,
      'guarantor' : 3    
}
data['outros_fiadores'] = data['outros_fiadores'].map(outros_fiadores_dictionary)
data.head()

#mudando categoria variavel 'propriedade'

propriedade_dictionary = { 'real estate' : 1,
      'if not A121 : building society savings agreement/ life insurance' : 2,
      'if not A121/A122 : car or other, not in attribute 6' : 3,
      'unknown / no property' : 4 
}
data['propriedade'] = data['propriedade'].map(propriedade_dictionary)
data.head()

#mudando categoria variavel 'outros_planos_financiamento'

outros_planos_financiamento_dictionary = { 'bank' : 1,
      'stores' : 2,
      'none' : 3 
}

data['outros_planos_financiamento'] = data['outros_planos_financiamento'].map(outros_planos_financiamento_dictionary)
data.head()

#mudando categoria variavel 'tipo_residencia'

tipo_residencia_dictionary = { 'rent' : 1,
      'own' : 2,
      'for free' : 3 
}

data['tipo_residencia'] = data['tipo_residencia'].map(tipo_residencia_dictionary)
data.head()

#mudando categoria variavel 'status_emprego'

status_emprego_dictionary = { 'unemployed/ unskilled - non-resident' : 1,
      'unskilled - resident' : 2,
      'skilled employee / official' : 3,
      'management/ self-employed/ highly qualified employee/ officer' : 4
}
data['status_emprego'] = data['status_emprego'].map(status_emprego_dictionary)
data.head()

#mudando categoria variavel 'telefone'

telefone_dictionary = { 'yes, registered under the customers name ' : 1,
      'none' : 0
}
data['telefone'] = data['telefone'].map(telefone_dictionary)
data.head()

#mudando categoria variavel 'trabalhador_estrangeiro'

trabalhador_estrangeiro_dictionary = { 'yes' : 1,
      'no' : 0
}
data['trabalhador_estrangeiro'] = data['trabalhador_estrangeiro'].map(trabalhador_estrangeiro_dictionary)
data.head()

y = data['default']
x = data.drop(columns = 'default')

from sklearn.model_selection import train_test_split
SEED = 77
train_x, test_x, train_y, test_y = train_test_split(x, y, test_size = 0.30, random_state = SEED)

train_base = train_x.shape[0]
test_base = test_x.shape[0]

print('A base de treino tem %s elementos e a base de teste tem %s elementos' %(train_base, test_base))

modelo = LogisticRegression(max_iter=1000)
modelo.fit(train_x, train_y)
print(modelo.score(train_x, train_y))

from sklearn.metrics import accuracy_score

predictions = modelo.predict(test_x)
accuracy = accuracy_score(test_y, predictions)
accuracy = round(accuracy, 2) * 100
accuracy

import matplotlib.pyplot as plt
from sklearn.metrics import plot_confusion_matrix

confusion_matrix = plot_confusion_matrix(modelo, test_x, test_y, cmap="Blues", values_format = '.3g')
confusion_matrix

from sklearn.metrics import classification_report

print(classification_report(test_y, predictions))

from sklearn.metrics import roc_curve, roc_auc_score

predicty_probability = modelo.predict_proba(test_x)[:, 1]

# tpf = taxa falsos positivos
# tvp = taxa verdadeiros positivos

tfp, tvp, limit = roc_curve(test_y, predicty_probability)
print('roc_auc', roc_auc_score(test_y, predicty_probability))

plt.subplots(1, figsize=(5,5))
plt.title('ROC Curve')
plt.plot(tfp, tvp)
plt.xlabel('Especify')
plt.ylabel('Sensibility')

plt.show()

variables_analytics = ['sexo_est_civil', 'idade', 'prazo_emprestimo_meses', 'valor_emprestimo', 'default']
data[variables_analytics].describe()

#homem = categorias 1, 3, 4
#mulher = categorias 2, 5

data['sexo_est_civil'].value_counts()

# 310 mulheres e 690 homens

dados['default'].value_counts()

# base de dados desbalanceada

import seaborn as sns
histograms = ['sexo_est_civil', 'prazo_emprestimo_meses', 'default']

histograms_list = list(enumerate(histograms))

plt.figure(figsize = (30,20))
for i in histograms_list:
  plt.subplot(2, 2, i[0]+1)
  sns.countplot(x = i[1], data = data)
  
  
